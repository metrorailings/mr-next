/* ----------------------- MIX-INS ----------------------------- */

/*
 * Functional mix-in responsible for setting transitions on elements
 *
 * @param $property - the property or properties upon which to set transitions upon
 * @param [$duration] - the number of seconds the animation is expected to last
 * @param [$timing] - the pace at which the transition will animate
 * @param [$delay] - the number of seconds to wait before initiating the animation
 *
 * @author kinsho
 */
@mixin transitionSettings($property, $timing: ease, $duration: 2s, $delay: 0s)
{
	transition-property: $property;
	transition-timing-function: $timing;
	transition-duration: $duration;
	transition-delay: $delay;
}

/*
 * Functional mix-in responsible for setting all animation-related settings across all the major browsers
 *
 * @param [$keyframeSet] - the name of the set of keyframes towards which to apply these settings
 * @param [$duration] - the duration of the animation
 * @param [$timing] - the pace at which the animation will progress
 * @param [$delay] - the amount of time to wait before the animation begins
 * @param [$iterations] - the number of times which to execute the animation
 * @param [$direction] - the direction in which the animation should play over time
 * @param [$persist] - a flag indicating whether the end state of the animation should persist after the animation ends
 *
 * @author kinsho
 */
@mixin animationSettings($keyframeSet: false, $duration: false, $timing: false, $delay: false, $iterations: 1, $direction: normal, $persist: false)
{
	@if ($keyframeSet)
	{
		animation-name: $keyframeSet;
		-webkit-animation-name: $keyframeSet;
		-moz-animation-name: $keyframeSet;
		-ms-animation-name: $keyframeSet;
		-o-animation-name: $keyframeSet;
	}

	@if ($duration)
	{
		animation-duration: $duration;
		-webkit-animation-duration: $duration;
		-moz-animation-duration: $duration;
		-ms-animation-duration: $duration;
		-o-animation-duration: $duration;
	}

	@if ($timing)
	{
		animation-timing-function: $timing;
		-webkit-animation-timing-function: $timing;
		-moz-animation-timing-function: $timing;
		-ms-animation-timing-function: $timing;
		-o-animation-timing-function: $timing;
	}

	@if ($delay)
	{
		animation-delay: $delay;
		-webkit-animation-delay: $delay;
		-moz-animation-delay: $delay;
		-ms-animation-delay: $delay;
		-o-animation-delay: $delay;
	}

	@if ($direction)
	{
		animation-direction: $direction;
		-webkit-animation-direction: $direction;
		-moz-animation-direction: $direction;
		-ms-animation-direction: $direction;
		-o-animation-direction: $direction;
	}

	@if ($persist)
	{
		animation-fill-mode: forwards;
		-webkit-animation-fill-mode: forwards;
		-moz-animation-fill-mode: forwards;
		-ms-animation-fill-mode: forwards;
		-o-animation-fill-mode: forwards;
	}

	animation-iteration-count: $iterations;
	-webkit-animation-iteration-count: $iterations;
	-moz-animation-iteration-count: $iterations;
	-ms-animation-iteration-count: $iterations;
	-o-animation-iteration-count: $iterations;
}

/*
 * Mix-in responsible for setting up keyframes across all the major browsers
 * NOTE: The content to populate the body of the keyframes are provided through the use of the
 * 		@content directive. Any invocation of this mix-in must have external content attached.
 *
 * @param $name - the name to assign to the keyframes being generated
 *
 * @author kinsho
 */
@mixin keyframes($name)
{
	@keyframes #{$name}
	{
		@content;
	}

	@-webkit-keyframes #{$name}
	{
		@content;
	}

	@-moz-keyframes #{$name}
	{
		@content;
	}

	@-ms-keyframes #{$name}
	{
		@content;
	}

	@-o-keyframes #{$name}
	{
		@content;
	}
}